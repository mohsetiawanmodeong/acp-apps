exports.doTest = function() {
    console.log("mrc-utils Test Function.");
}

//Convert MAP to Array.
exports.getArray = function getArray(vMap) {
    var vArray = [];

    for (const [name, value] of vMap) {
        vArray.push(value);
    }
    return vArray;
}

function absAngle(a) {
    return (360 + (a % 360)) % 360;
}

exports.angleDelta = function angleDelta(a, b) {
    let delta = Math.abs(absAngle(a) - absAngle(b));
    let sign = absAngle(a) > absAngle(b) || delta >= 180 ? -1 : 1;
    return (180 - Math.abs(delta - 180)) * sign;
}

//Convert Minetec Position packets into Position Object.
exports.getPosPackets = function getPosPackets(vBuffer) {
    //console.log("FLTAUTODELAY:POSPACKET:Positioning Packet Received["+JSON.stringify(vBuffer)+"].");
    var b1, b2, b3, b4, b5, b6, b7, b8;
    var vX, vY, vZ;
    var vHeader = {};
    var vPosPackets = [];
    var vPos = 0;
    var vPosPacket = {};
    var vStringTotalLength = 0;
    var vStringCurrentLength = 0;
    var vStringCurrent = "";
    vBuffer.forEach((value, index, arr) => {
        switch (index) {
            case 0:
                b1 = value;
                break;
            case 1:
                b2 = value;
                break;
            case 2:
                b3 = value;
                break;
            case 3:
                b4 = value;
                vHeader.seq_no = (b1 << 24) | (b2 << 16) | (b3 << 8) | b4;
                break;
            case 4:
                vHeader.packet_id = value;
                break;
            case 5:
                vHeader.packet_count = value;
                break;
            case 6:
                vHeader.field_count = value;
                //console.debug("FLTAUTODELAY:POSPACKET:Header["+JSON.stringify(vHeader)+"].");
                break;
            default:
                switch (vPos) {
                    //FIELD LENGTH
                    case 0:
                        vFieldLength = value;
						if (vFieldLength == 0) vPos = vPos + 8;
                        //console.debug("ASSETID:FIELDLENGTH["+vFieldLength+"].");
                        break;
                        //ASSETID
                    case 1:
                        vPosPacket = {};
                        b1 = value;
                        break;
                    case 2:
                        b2 = value;
                        break;
                    case 3:
                        b3 = value;
                        break;
                    case 4:
                        b4 = value;
                        break;
                    case 5:
                        b5 = value;
                        break;
                    case 6:
                        b6 = value;
                        break;
                    case 7:
                        b7 = value;
                        break;
                    case 8:
                        b8 = value;
                        vPosPacket.asset_id = (b1 << 56) | (b2 << 48) | (b3 << 40) | (b4 << 32) | (b5 << 24) | (b6 << 16) | (b7 << 8) | b8;
                        break;
                        //FIELD LENGTH
                    case 9:
                        vFieldLength = value;
                        //console.debug("TIMESTAMP:FIELDLENGTH["+vFieldLength+"].");
                        break;
                        //TIMESTAMP
                    case 10:
                        b1 = value;
                        break;
                    case 11:
                        b2 = value;
                        break;
                    case 12:
                        b3 = value;
                        break;
                    case 13:
                        b4 = value;
                        break;
                    case 14:
                        b5 = value;
                        break;
                    case 15:
                        b6 = value;
                        break;
                    case 16:
                        b7 = value;
                        break;
                    case 17:
                        b8 = value;
                        let seconds = 0;
                        let fraction = 0;
                        seconds = seconds * 256 + b1;
                        seconds = seconds * 256 + b2;
                        seconds = seconds * 256 + b3;
                        seconds = seconds * 256 + b4;
                        seconds = seconds * 256 + b5;
                        seconds = seconds * 256 + b6;
                        seconds = seconds * 256 + b7;
                        seconds = seconds * 256 + b8;
                        //fraction=fraction*256+b8;
                        //Theis the time since Jan 1 1900, now lets convert it to UTC.
                        //vPosPacket.timestamp= seconds - 2209021200000; 
                        vPosPacket.timestamp = seconds - 2208988800000;
                        //vPosPacket.timestamp= seconds + fraction / Math.pow(2, 8);
                        //vPosPacket.timestamp= BigInt((b1 << 56) |(b2 << 48) | (b3 << 40) | (b4 << 32) | (b5 << 24) | (b6 << 16) | (b7 << 8) | b8);
                        //var vTempDate=(b1 << 24) |(b2 << 16) | (b3 << 8) | b4;
                        //var vTempTime=(b5 << 24) |(b6 << 16) | (b7 << 8) | b8;

                        //console.log("TIMESTAMP:["+b1+","+b2+","+b3+","+b4+","+b5+","+b6+","+b7+","+b8+"]D["+vTempDate+"]T["+vTempTime+"].");
                        //vPosPacket.timestamp=(b8 << 56) |(b7 << 48) | (b6 << 40) | (b5 << 32) | (b4 << 24) | (b3 << 16) | (b2 << 8) | b1;
                        break;
                        //FIELD LENGTH
                    case 18:
                        vFieldLength = value;
                        //console.debug("POSITIONFIELDLENGTH["+vFieldLength+"].");
                        if (vFieldLength == 0) vPos = vPos + 12;
                        break;
                        //POSITION
                    case 19:
                        b1 = value;
                        break;
                    case 20:
                        b2 = value;
                        break;
                    case 21:
                        b3 = value;
                        break;
                    case 22:
                        b4 = value;
                        vX = (b1 << 24) | (b2 << 16) | (b3 << 8) | b4;
                        break;
                    case 23:
                        b1 = value;
                        break;
                    case 24:
                        b2 = value;
                        break;
                    case 25:
                        b3 = value;
                        break;
                    case 26:
                        b4 = value;
                        vY = (b1 << 24) | (b2 << 16) | (b3 << 8) | b4;
                        break;
                    case 27:
                        b1 = value;
                        break;
                    case 28:
                        b2 = value;
                        break;
                    case 29:
                        b3 = value;
                        break;
                    case 30:
                        b4 = value;
                        vZ = (b1 << 24) | (b2 << 16) | (b3 << 8) | b4;
                        vPosPacket.position = [vX / 10, vY / 10, vZ / 10];
                        break;
                        //FIELD LENGTH
                    case 31:
                        vFieldLength = value;
                        //console.debug("HEADINGFIELDLENGTH["+vFieldLength+"].");
                        if (vFieldLength == 0) vPos = vPos + 12;
                        break;
                        //HEADING
                    case 32:
                        b1 = value;
                        break;
                    case 33:
                        b2 = value;
                        break;
                    case 34:
                        b3 = value;
                        break;
                    case 35:
                        b4 = value;
                        vX = (b1 << 24) | (b2 << 16) | (b3 << 8) | b4;
                        break;
                    case 36:
                        b1 = value;
                        break;
                    case 37:
                        b2 = value;
                        break;
                    case 38:
                        b3 = value;
                        break;
                    case 39:
                        b4 = value;
                        vY = (b1 << 24) | (b2 << 16) | (b3 << 8) | b4;
                        break;
                    case 40:
                        b1 = value;
                        break;
                    case 41:
                        b2 = value;
                        break;
                    case 42:
                        b3 = value;
                        break;
                    case 43:
                        b4 = value;
                        vZ = (b1 << 24) | (b2 << 16) | (b3 << 8) | b4;
                        vPosPacket.forward_heading = [vX, vY, vZ];
                        break;
                        //FIELD LENGTH
                    case 44:
                        vFieldLength = value;
                        //console.debug("REGIONIDFIELDLENGTH["+vFieldLength+"].");
                        if (vFieldLength == 0) vPos = vPos + 8;
                        break;
                        //REGIONID
                    case 45:
                        b1 = value;
                        break;
                    case 46:
                        b2 = value;
                        break;
                    case 47:
                        b3 = value;
                        break;
                    case 48:
                        b4 = value;
                        break;
                    case 49:
                        b5 = value;
                        break;
                    case 50:
                        b6 = value;
                        break;
                    case 51:
                        b7 = value;
                        break;
                    case 52:
                        b8 = value;
                        vPosPacket.region_id = (b1 << 56) | (b2 << 48) | (b3 << 40) | (b4 << 32) | (b5 << 24) | (b6 << 16) | (b7 << 8) | b8;
                        break;
                        //FIELD LENGTH
                    case 53:
                        vFieldLength = value;
                        //console.debug("POSITIONSOURCEFIELDLENGTH["+vFieldLength+"].");
                        break;
                        //POSITION_SOURCE
                    case 54:
                        vPosPacket.position_source = value;
                        break;
                        //ASSET_NAME
                    case 55:
                        vStringTotalLength = value;
                        //console.debug("ASSETNAMEFIELDLENGTH["+vStringTotalLength+"].");
                        vStringCurrentLength = 0;
                        vStringCurrent = "";
                        break;
                    default:
                        if (vStringCurrentLength < vStringTotalLength) {
                            //console.debug("ASSETNAMEFIELDVALUE["+value+"].");
                            vStringCurrent = vStringCurrent + String.fromCharCode(value);
                            vStringCurrentLength++;
                            vFieldLength = -1;
                        } else {
                            if (vFieldLength == -1) {
                                vPosPacket.asset_name = "" + vStringCurrent;
                                vFieldLength = value;
                                //console.log("ISINFRASTRUCTUREFIELDLENGTH["+vFieldLength+"].");
                            } else {
                                vPosPacket.is_infrastructure = value;
                                vPosPacket.velocity = 0;
                                vPosPacket.duration = 0;
                                vPosPacket.heading = 0;
								//if ( !vPosPacket.asset_name.includes("UNKNOWN") && !vPosPacket.asset_name.includes("B.")){
                                //	console.log("UTILS:POSPACKET:PASSED: NAME["+vPosPacket.asset_name+"]POSITION["+JSON.stringify(vPosPacket.position)+"]INFRA["+JSON.stringify(vPosPacket.is_infrastructure)+"].");
								//}
                                vPosPackets.push(vPosPacket);
                                vPos = -1;
                            }
                        }
                }
                vPos++;
        }
    });
    return vPosPackets;
}
